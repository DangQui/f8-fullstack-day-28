function sendRequest(method, url, callback) {
  const xhr = new XMLHttpRequest();
  xhr.open(method, url, true);
  xhr.onload = function () {
    if (this.status >= 200 && xhr.status <= 400) {
      try {
        const data = JSON.parse(xhr.responseText);
        // G·ªçi callback v·ªõi null (no error) v√† data
        callback(null, data);
      } catch (error) {
        // N·∫øu JSON l·ªói tr·∫£ v·ªÅ callback
        callback(new Error("Invalid JSON"), null);
      }
    } else {
      callback(new Error(`HTTP error: ${xhr.status}`), null);
    }
  };

  xhr.onerror = function () {
    callback(new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi!"), null);
  };

  xhr.send();
}

/* 
  CH·ª®C NƒÇNG 1: T·∫£i Th√¥ng Tin C·ªßa User 
*/
const userIdInput = document.querySelector("#user-id-input");
const searchUserBtn = document.querySelector("#search-user-btn");
const userLoading = document.querySelector("#user-loading");
const userError = document.querySelector("#user-error");
const userProfileCard = document.querySelector("#user-profile-card");

const userAvatar = document.querySelector("#user-avatar");
const userName = document.querySelector("#user-name");
const userEmail = document.querySelector("#user-email");
const userPhone = document.querySelector("#user-phone");
const userWebsite = document.querySelector("#user-website");
const userCompany = document.querySelector("#user-company");
const userAddress = document.querySelector("#user-address");
const userErrorText = document.querySelector("#user-error-text");

// H√†m x·ª≠ l√Ω response t·ª´ API
function renderUser(error, data) {
  // ·∫®n loading khi API Call ho√†n t·∫•t
  userLoading.style.display = "none";

  // Ki·ªÉm tra n·∫øu c√≥ l·ªói t·ª´ API
  if (error) {
    // Set text l·ªói: N·∫øu l√† 404, th√¥ng b√°o r√µ r√†ng, c√≤n l·∫°i d√πng message t·ª´ error
    userErrorText.textContent = error.message.includes("404")
      ? "User kh√¥ng t·ªìn t·∫°i!"
      : error.message;
    userError.style.display = "block";
    userProfileCard.style.display = "none";
    return;
  }

  // Th√†nh C√¥ng: Update DOM
  // L·∫•y ch·ªØ c√°i ƒë·∫ßu IN HOA l√†m AVT
  userAvatar.textContent = data.name.charAt(0).toUpperCase();
  userName.textContent = data.name;
  userEmail.textContent = data.email;
  userPhone.textContent = data.phone;
  userWebsite.textContent = data.website;
  userCompany.textContent = data.company.name;
  userAddress.textContent = `${data.address.street}, ${data.address.city}`;

  // Hi·ªÉn Card ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y th√¥ng tin
  userProfileCard.style.display = "block";
  userError.style.display = "none";
}

// H√†m x·ª≠ l√Ω s·ª± ki·ªán click
function handleSearchUser() {
  // L·∫•y gi√° tr·ªã t·ª´ input
  const userId = parseInt(userIdInput.value);
  if (isNaN(userId) || userId < 1 || userId > 10) {
    userErrorText.textContent = "ID ph·∫£i t·ª´ 1 ƒë·∫øn 10!";
    userError.style.display = "block";
    userProfileCard.style.display = "none";
    return;
  }

  // Hi·ªán loading trong l√∫c ƒëang ch·ªù
  userLoading.style.display = "block";
  userError.style.display = "none";
  userProfileCard.style.display = "none";

  // T·∫°o URL
  const url = `https://jsonplaceholder.typicode.com/users/${userId}`;
  sendRequest("GET", url, renderUser);
}

searchUserBtn.addEventListener("click", handleSearchUser);

/* 
  CH·ª®C NƒÇNG 2: T·ª± ƒê·ªông Load 5 Post ƒê·∫ßu Ti√™n Khi V√†o Trang  
*/
const postsLoading = document.querySelector("#posts-loading");
const postsError = document.querySelector("#posts-error");
const postsErrorText = document.querySelector("#posts-error-text");
const postsContainer = document.querySelector("#posts-container");
const loadMoreBtn = document.querySelector("#load-more-posts-btn");

let loadedPostsCount = 0;

// H√†m x·ª≠ l√Ω t·ª± ƒë·ªông posts 5 b√†i khi load
function loadInitialPosts() {
  postsLoading.style.display = "block";
  postsError.style.display = "none";
  postsContainer.innerHTML = "";

  const url = "https://jsonplaceholder.typicode.com/posts?_limit=5";
  sendRequest("GET", url, handlePostsResponse);
}

function loadMorePosts() {
  postsLoading.style.display = "block";
  loadMoreBtn.style.display = "none"; // ·∫®n t·∫°m th·ªùi ƒë·ªÉ tr√°nh click nhi√™u l·∫ßn

  // B·ªè qua s·ªë posts ƒë√£ load
  const url = `https://jsonplaceholder.typicode.com/posts?_start=${loadedPostsCount}&_limit=5`;

  sendRequest("GET", url, handlePostsResponse);
}

function handlePostsResponse(error, posts) {
  postsLoading.style.display = "none";

  if (error) {
    postsErrorText.textContent = error.message;
    postsError.style.display = "block";
    loadMoreBtn.style.display = "block";
    return;
  }

  renderPosts(posts, true);

  loadedPostsCount += posts.length;

  if (loadedPostsCount < 100) {
    loadMoreBtn.style.display = "block"; // N·∫øu c√≤n post th√¨ th·ªã n√∫t Btn
  } else {
    loadMoreBtn.style.display = "none"; // H·∫øt post th√¨ ·∫©n
  }
}

function renderPosts(posts, append = false) {
  // N·∫øu kh√¥ng append, clear container tr∆∞·ªõc khi render
  if (!append) {
    postsContainer.innerHTML = "";
  }

  posts.forEach((post) => {
    // T·∫°o element div cho post m·ªõi
    const postElement = document.createElement("div");
    // Set class ƒë·ªÉ style CSS
    postElement.className = "post-item";
    // Set attribute ƒë·ªÉ d·ªÖ t√¨m khi click
    postElement.setAttribute("data-post-id", post.id);

    // T·∫°o n·ªôi dung HTML cho POST
    postElement.innerHTML = `
      <h4 class="post-title">${post.title}</h4>
      <p class="post-body">${post.body}</p>
      <p class="post-author">T√°c gi·∫£: <span class="author-name" data-user-id="${post.userId}">Loading...</span></p>
      <button class="show-comments-btn" data-post-id="${post.id}">Xem comments</button>
      <div class="comments-container" data-post-id="${post.id}" style="display: none"></div>
    `;

    postsContainer.appendChild(postElement);
  });
}

// H√†m x·ª≠ l√Ω event listener cho container
function setupPostsEventListeners() {
  postsContainer.addEventListener("click", handleShowComments);
  loadMoreBtn.addEventListener("click", loadMorePosts);
}

// H√†m x·ª≠ l√Ω click, nh·∫≠n event
function handleShowComments(e) {
  // Ki·ªÉm tra n·∫øu element ƒë∆∞·ª£c click c√≥ class "show-comments-btn", n·∫øu kh√¥ng ph·∫£i btn return
  if (!e.target.classList.contains("show-comments-btn")) return;

  // L·∫•y postId t·ª´ data-post-id c·ªßa button
  const postId = parseInt(e.target.dataset.postId);
  // T√¨m post element cha (closest) ƒë·ªÉ d·ªÖ truy c·∫≠p author v√† comments container
  const postElement = e.target.closest(".post-item");
  const authorSpan = postElement.querySelector(".author-name");
  const commentsContainer = postElement.querySelector(".comments-container");

  // Toggle: N·∫øu comments ƒëang hi·ªÉn th·ªã, ·∫©n v√† ƒë·ªïi text button
  if (commentsContainer.style.display === "block") {
    commentsContainer.style.display = "none";
    e.target.textContent = "Xem comments";
    return;
  }

  // N·∫øu ch∆∞a load comments: Hi·ªÉn th·ªã loading
  commentsContainer.innerHTML = "<p>üîÑ ƒêang t·∫£i comments...</p>";
  // Hi·ªán comments container
  commentsContainer.style.display = "block";
  // ƒê·ªïi text th√†nh ·∫©n
  e.target.textContent = "·∫®n comments";

  const url = `https://jsonplaceholder.typicode.com/posts/${postId}/comments`;

  sendRequest("GET", url, handleCommentsResponse.bind(null, commentsContainer));
}

function handleCommentsResponse(commentsContainer, error, comments) {
  if (error) {
    commentsContainer.innerHTML = `<p>L·ªói: ${error.message}</p>`;
    return;
  }

  commentsContainer.innerHTML = "";
  comments.forEach((comment) => {
    const commentElement = document.createElement("div");
    commentElement.className = "comment-item";

    commentElement.innerHTML = `
      <div class="comment-author">${comment.name}</div>
      <div class="comment-email">${comment.email}</div>
      <div class="comment-body">${comment.body}</div>
    `;

    commentsContainer.appendChild(commentElement);
  });
}

// T·ª± ƒë·ªông load 5 posts ƒë·∫ßu
loadInitialPosts();

// G·∫Øn events cho click comment l√† load more
setupPostsEventListeners();

/*
  CH·ª®C NƒÇNG 3: Todo List V·ªõi Filter
*/
const todoUserIdInput = document.querySelector("#todo-user-id-input");
const loadTodosBtn = document.querySelector("#load-todos-btn");
const todoFilters = document.querySelectorAll(".filter-btn");
const todoList = document.querySelector("#todo-list");
const todosLoading = document.querySelector("#todos-loading");
const todosError = document.querySelector("#todos-error");
const todosErrorText = document.querySelector("#todos-error-text");
const totalTodosEl = document.querySelector("#total-todos");
const completedTodosEl = document.querySelector("#completed-todos");
const incompleteTodosEl = document.querySelector("#incomplete-todos");

// L∆∞u t·∫•t c·∫£ todos ƒë·ªÉ s·ª≠ d·ª•ng cho filter
let allTodos = [];

// H√†m x·ª≠ l√Ω button "Load Todos"
function handleLoadTodos() {
  const userId = parseInt(todoUserIdInput.value);
  if (isNaN(userId) || userId < 1 || userId > 10) {
    todosErrorText.textContent = "ID ph·∫£i nh·∫≠p t·ª´ 1 ƒë·∫øn 10";
    todosError.style.display = "block";
    return;
  }

  todosLoading.style.display = "block";
  todosError.style.display = "none";
  todoList.innerHTML = "";

  const url = `https://jsonplaceholder.typicode.com/users/${userId}/todos`;

  sendRequest("GET", url, handleTodosResponse);
}

// H√†m hi·ªÉn th·ªã tr·∫°ng th√°i loading cho todos
function showTodosLoading() {
  todosLoading.style.display = "block";
  todosError.style.display = "none";
  todoList.innerHTML = "";
}

// H√†m hi·ªÉn th·ªã l·ªói
function showTodosError(message) {
  todosErrorText.textContent = message;
  todosError.style.display = "block";
}

// H√†m x·ª≠ l√Ω response t·ª´ API
function handleTodosResponse(error, todos) {
  // ·∫®n state loading khi API call ho√†n t·∫•t
  todosLoading.style.display = "none";

  // Ki·ªÉm tra n·∫øu c√≥ l·ªói t·ª´ API
  if (error) {
    showTodosError(error.message);
    return;
  }

  // Th√†nh C√¥ng:
  allTodos = todos;
  renderTodos(allTodos);
  updateStats(allTodos);
}

// H√†m render Arr todos
function renderTodos(todos) {
  // Clear tr∆∞·ªõc khi render m·ªõi
  todoList.innerHTML = "";
  // Loop qua t·ª´ng todo trong array c·∫ßn render
  todos.forEach((todo) => {
    const todoElement = document.createElement("div");
    todoElement.className = `todo-item ${
      todo.completed ? "completed" : "incomplete"
    }`;

    todoElement.setAttribute("data-todo-id", todo.id);
    todoElement.setAttribute("data-completed", todo.completed);

    todoElement.innerHTML = `
      <div class="todo-checkbox">${todo.completed ? "‚úÖ" : "‚è≥"}</div>
      <div class="todo-text">${todo.title}</div>
    `;

    todoList.appendChild(todoElement);
  });
}

// H√†m c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng todos ·ªü m·ªói tr·∫°ng th√°i
function updateStats(todos) {
  const total = todos.length;
  const completed = todos.filter((todo) => todo.completed).length;
  const incomplete = total - completed;
  totalTodosEl.textContent = total;
  completedTodosEl.textContent = completed;
  incompleteTodosEl.textContent = incomplete;
}

// H√†m x·ª≠ l√Ω khi click button filter
function handleFilterTodos(e) {
  const targetBtn = e.target;

  // X√≥a class "active" kh·ªïi t·∫•t c·∫£ filter buttons
  todoFilters.forEach((btn) => btn.classList.remove("active"));
  // Th√™m class cho button ƒë∆∞·ª£c click
  targetBtn.classList.add("active");

  // L·∫•y filter t·ª´ data-filter
  const filter = targetBtn.dataset.filter;
  // T·∫°o arr filtered d·ª±a tr√™n filter type
  let filteredTodos = [];
  if (filter === "all") {
    // N·∫øu "all" d√πng t·∫•t c·∫£ todos
    filteredTodos = allTodos;
  } else if (filter === "completed") {
    // N·∫øu 'completed', filter ch·ªâ todos v·ªõi completed = true
    filteredTodos = allTodos.filter((todo) => todo.completed);
  } else if (filter === "incomplete") {
    filteredTodos = allTodos.filter((todo) => !todo.completed);
  }

  renderTodos(filteredTodos);
}

loadTodosBtn.addEventListener("click", handleLoadTodos);

todoFilters.forEach((todoBtn) => {
  todoBtn.addEventListener("click", handleFilterTodos);
});

document.querySelector("#filter-all").classList.add("active");
